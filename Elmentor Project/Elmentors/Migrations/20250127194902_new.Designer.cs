// <auto-generated />
using Elmentors.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elmentors.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250127194902_new")]
    partial class @new
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Elmentors.Models.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Username")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("Elmentors.Models.RoadMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.ToTable("RoadMaps");
                });

            modelBuilder.Entity("Elmentors.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoadMapId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoadMapId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("TopicTopic", b =>
                {
                    b.Property<int>("DependentId")
                        .HasColumnType("int");

                    b.Property<int>("PrerequisitesId")
                        .HasColumnType("int");

                    b.HasKey("DependentId", "PrerequisitesId");

                    b.HasIndex("PrerequisitesId");

                    b.ToTable("TopicTopic");
                });

            modelBuilder.Entity("Elmentors.Models.RoadMap", b =>
                {
                    b.HasOne("Elmentors.Models.Mentor", null)
                        .WithMany("RoadMaps")
                        .HasForeignKey("MentorId");
                });

            modelBuilder.Entity("Elmentors.Models.Topic", b =>
                {
                    b.HasOne("Elmentors.Models.RoadMap", null)
                        .WithMany("Topics")
                        .HasForeignKey("RoadMapId");
                });

            modelBuilder.Entity("TopicTopic", b =>
                {
                    b.HasOne("Elmentors.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("DependentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elmentors.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("PrerequisitesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elmentors.Models.Mentor", b =>
                {
                    b.Navigation("RoadMaps");
                });

            modelBuilder.Entity("Elmentors.Models.RoadMap", b =>
                {
                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
